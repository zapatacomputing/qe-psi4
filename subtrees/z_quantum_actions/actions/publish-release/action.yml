# This workflow is meant to be run on each push to the base branch. It allows executing
# the "publish release" action.
#
# Don't extend this workflow. If any more steps are needed please add them to the
# action instead. This allows reusing it between repos.
name: Publish release

description: Infers current project version, pushes a tag with a new version, and creates an entry on GitHub Releases

# Note: this action assumes that the repo was already cloned

inputs:
  new-version:
    description: Optional override for the release version. If not provided, will be inferred from current version.
    required: false


outputs:
  release-version:
    description: Version that the release ended up running for.
    value: ${{ steps.infer-release-version.outputs.inferred_version }}

runs:
  using: composite
  steps:
    - name: Infer release version
      id: infer-release-version
      shell: bash
      run: |
        NEW_VERSION="${{ inputs.new_version }}"
        if [ -n "$NEW_VERSION" ]; then
          INFERRED_VERSION="$NEW_VERSION"
          echo "using $INFERRED_VERSION provided as action input"
        else
          PKG_VERSION=$(python3 setup.py --version)

          MAJOR=$(echo $PKG_VERSION | sed -r 's/^([0-9]+)\.([0-9]+)\.([0-9]+)([-\.].+)?$/\1/')
          MINOR=$(echo $PKG_VERSION | sed -r 's/^([0-9]+)\.([0-9]+)\.([0-9]+)([-\.].+)?$/\2/')
          PATCH=$(echo $PKG_VERSION | sed -r 's/^([0-9]+)\.([0-9]+)\.([0-9]+)([-\.].+)?$/\3/')
          DEV=$(echo $PKG_VERSION | sed -r 's/^([0-9]+)\.([0-9]+)\.([0-9]+)([-\.].+)?$/\4/')
          echo "read version: $MAJOR.$MINOR.$PATCH$DEV"

          INFERRED_VERSION="$MAJOR.$(expr $MINOR + 1).0"
          echo "inferred version: $INFERRED_VERSION"
        fi
        # special github syntax for setting step outputs
        # see https://docs.github.com/en/actions/reference/workflow-commands-for-github-actions#setting-an-output-parameter
        echo "::set-output name=inferred_version::$INFERRED_VERSION"

    - name: Push new version tag
      id: push-new-version-tag
      shell: bash
      run: |
        TAG="v${{steps.infer-release-version.outputs.inferred_version}}"
        git tag "$TAG"
        git push --tags
        echo "::set-output name=tag::$TAG"

    - name: Create entry on GH Releases
      shell: bash
      run: |
        curl \
          -X POST \
          curl -H "Authorization: token ${{ github.token }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/releases \
          -d '{"tag_name":"${{ steps.push-new-version-tag.outputs.tag }}"}'

